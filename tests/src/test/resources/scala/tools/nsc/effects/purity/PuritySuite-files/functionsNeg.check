newSource:17: error: effect type mismatch;
 found   : (RefSet(Set()),Assigns(Map()),RefSet(Set(SymRef(value d))))
 required: (RefSet(Set(SymRef(value anon))),Assigns(Map(value anon -> AnyLoc)),RefSet(Set(SymRef(value anon))))
    anon.appliquer()
                  ^
newSource:21: error: effect type mismatch;
 found   : (RefSet(Set()),Assigns(Map()),RefSet(Set(SymRef(value d))))
 required: (RefSet(Set()),Assigns(Map()),RefSet(Set()))
      def appliquer(): E @loc() = d.y
                                    ^
newSource:28: error: effect type mismatch;
 found   : (RefSet(Set()),Assigns(Map()),RefSet(Set(SymRef(value d))))
 required: (RefSet(Set(SymRef(value fun))),Assigns(Map(value fun -> AnyLoc)),RefSet(Set(SymRef(value fun))))
    fun()
       ^
newSource:32: error: type mismatch;
 found   : () => C.this.E{def apply(): C.this.E @scala.annotation.effects.mod @scala.annotation.effects.loc(d)}
 required: () => C.this.E{def apply(): C.this.E @scala.annotation.effects.loc}
    val fun: (() => E) { def apply(): E @loc() } = () => d.y
                                                      ^
newSource:39: error: type mismatch;
 found   : () => Unit{def apply(): Unit @scala.annotation.effects.mod @scala.annotation.effects.assign(da, d, da)}
 required: () => C.this.E{def apply(): C.this.E @scala.annotation.effects.loc}
    val fun: (() => E) { def apply(): E @loc() } = () => {
                                                      ^
newSource:44: error: effect type mismatch;
 found   : (RefSet(Set()),Assigns(Map()),RefSet(Set(SymRef(value d))))
 required: (RefSet(Set()),Assigns(Map()),RefSet(Set()))
    da.y
       ^
